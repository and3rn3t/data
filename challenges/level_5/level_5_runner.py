"""
Level 5 - Deep Learning Dynamo: Complete Runner
===============================================

Master comprehensive runner for all Level 5 deep learning challenges.
This script demonstrates the complete journey from neural network fundamentals
to advanced architectures.

Challenges Included:
1. Neural Network Fundamentals - Core concepts and architectures
2. Convolutional Neural Networks - Image processing and computer vision
3. Recurrent Neural Networks - Sequential data and temporal modeling
4. Advanced Architectures - Ensemble methods and modern techniques

Usage: python challenges/level_5/level_5_runner.py [challenge_number]
"""

import sys
import time
from typing import Optional


def run_challenge_1():
    """Run Challenge 1: Neural Network Fundamentals."""
    print("üß† CHALLENGE 1: Neural Network Fundamentals")
    print("=" * 60)

    try:
        from challenges.level_5.challenge_1_neural_network_fundamentals import (
            run_neural_network_challenges,
        )

        datasets = run_neural_network_challenges()
        return datasets is not None
    except ImportError as e:
        print(f"‚ùå Failed to import Challenge 1: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Challenge 1 failed: {e}")
        return False


def run_challenge_2():
    """Run Challenge 2: Convolutional Neural Networks."""
    print("\nüñºÔ∏è CHALLENGE 2: Convolutional Neural Networks")
    print("=" * 60)

    try:
        from challenges.level_5.challenge_2_convolutional_networks import (
            run_cnn_challenges,
        )

        datasets = run_cnn_challenges()
        return datasets is not None
    except ImportError as e:
        print(f"‚ùå Failed to import Challenge 2: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Challenge 2 failed: {e}")
        return False


def run_challenge_3():
    """Run Challenge 3: Recurrent Neural Networks."""
    print("\nüîÑ CHALLENGE 3: Recurrent Neural Networks")
    print("=" * 60)

    try:
        from challenges.level_5.challenge_3_recurrent_networks import run_rnn_challenges

        datasets = run_rnn_challenges()
        return datasets is not None
    except ImportError as e:
        print(f"‚ùå Failed to import Challenge 3: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Challenge 3 failed: {e}")
        return False


def run_challenge_4():
    """Run Challenge 4: Advanced Architectures."""
    print("\nüî¨ CHALLENGE 4: Advanced Neural Architectures")
    print("=" * 60)

    try:
        from challenges.level_5.challenge_4_advanced_architectures import (
            run_advanced_challenges,
        )

        datasets = run_advanced_challenges()
        return datasets is not None
    except ImportError as e:
        print(f"‚ùå Failed to import Challenge 4: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Challenge 4 failed: {e}")
        return False


def show_level_5_intro():
    """Show Level 5 introduction."""
    print("üöÄ LEVEL 5: DEEP LEARNING DYNAMO")
    print("=" * 60)
    print()
    print("Welcome to the Deep Learning Dynamo! This level covers:")
    print()
    print("üß† Challenge 1: Neural Network Fundamentals")
    print("   ‚Ä¢ Perceptrons and multi-layer networks")
    print("   ‚Ä¢ Activation functions and backpropagation")
    print("   ‚Ä¢ Hyperparameter optimization")
    print("   ‚Ä¢ Model interpretation and visualization")
    print()
    print("üñºÔ∏è Challenge 2: Convolutional Neural Networks")
    print("   ‚Ä¢ Convolution operations and filters")
    print("   ‚Ä¢ CNN architectures and pooling")
    print("   ‚Ä¢ Image augmentation techniques")
    print("   ‚Ä¢ Transfer learning concepts")
    print()
    print("üîÑ Challenge 3: Recurrent Neural Networks")
    print("   ‚Ä¢ Sequential data processing")
    print("   ‚Ä¢ RNN, LSTM, and GRU architectures")
    print("   ‚Ä¢ Time series prediction")
    print("   ‚Ä¢ Text generation and NLP")
    print()
    print("üî¨ Challenge 4: Advanced Architectures")
    print("   ‚Ä¢ Ensemble methods and voting")
    print("   ‚Ä¢ Attention mechanisms")
    print("   ‚Ä¢ Regularization techniques")
    print("   ‚Ä¢ Model interpretation and explainability")
    print()
    print("üìö Prerequisites: Completion of Levels 1-4")
    print("üéØ Goal: Master deep learning from fundamentals to advanced techniques")
    print()


def show_completion_summary():
    """Show Level 5 completion summary."""
    print("\n" + "üéâ" * 60)
    print("LEVEL 5: DEEP LEARNING DYNAMO - COMPLETE!")
    print("üéâ" * 60)
    print()
    print("üèÜ Congratulations! You have successfully mastered:")
    print()
    print("‚úÖ Neural Network Fundamentals")
    print("   ‚Ä¢ Core architectures and training algorithms")
    print("   ‚Ä¢ Hyperparameter optimization strategies")
    print("   ‚Ä¢ Model evaluation and interpretation")
    print()
    print("‚úÖ Convolutional Neural Networks")
    print("   ‚Ä¢ Image processing and computer vision")
    print("   ‚Ä¢ CNN architectures and transfer learning")
    print("   ‚Ä¢ Data augmentation and regularization")
    print()
    print("‚úÖ Recurrent Neural Networks")
    print("   ‚Ä¢ Sequential data modeling")
    print("   ‚Ä¢ LSTM/GRU architectures")
    print("   ‚Ä¢ Time series and text processing")
    print()
    print("‚úÖ Advanced Architectures")
    print("   ‚Ä¢ Ensemble methods and model combination")
    print("   ‚Ä¢ Attention mechanisms and feature importance")
    print("   ‚Ä¢ Model interpretation and explainability")
    print()
    print("üåü DEEP LEARNING SKILLS MASTERED:")
    print("‚Ä¢ Neural network design and implementation")
    print("‚Ä¢ Computer vision with CNNs")
    print("‚Ä¢ Natural language processing with RNNs")
    print("‚Ä¢ Advanced techniques and modern architectures")
    print("‚Ä¢ Model evaluation, interpretation, and deployment")
    print()
    print("üöÄ NEXT STEPS:")
    print("‚Ä¢ Implement real-world deep learning projects")
    print("‚Ä¢ Explore transformer architectures and attention")
    print("‚Ä¢ Learn generative models (VAEs, GANs)")
    print("‚Ä¢ Study reinforcement learning")
    print("‚Ä¢ Apply MLOps and model deployment techniques")
    print("‚Ä¢ Contribute to open-source deep learning projects")
    print()
    print("üéì You are now a Deep Learning Expert!")
    print("Ready to tackle advanced AI challenges and build innovative solutions!")


def run_all_challenges():
    """Run all Level 5 challenges in sequence."""
    print("Running all Level 5 challenges...")

    start_time = time.time()

    # Track completion status
    results = {
        "Challenge 1": False,
        "Challenge 2": False,
        "Challenge 3": False,
        "Challenge 4": False,
    }

    # Run each challenge
    print("\n" + "=" * 80)
    results["Challenge 1"] = run_challenge_1()

    if results["Challenge 1"]:
        print("\n" + "=" * 80)
        results["Challenge 2"] = run_challenge_2()

    if results["Challenge 2"]:
        print("\n" + "=" * 80)
        results["Challenge 3"] = run_challenge_3()

    if results["Challenge 3"]:
        print("\n" + "=" * 80)
        results["Challenge 4"] = run_challenge_4()

    # Show results
    end_time = time.time()
    duration = end_time - start_time

    print("\n" + "=" * 80)
    print("LEVEL 5 EXECUTION SUMMARY")
    print("=" * 80)

    print(f"\nChallenge Results:")
    for challenge, success in results.items():
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"‚Ä¢ {challenge}: {status}")

    successful_challenges = sum(results.values())
    total_challenges = len(results)

    print(
        f"\nOverall Progress: {successful_challenges}/{total_challenges} challenges completed"
    )
    print(f"Execution time: {duration:.1f} seconds")

    if successful_challenges == total_challenges:
        show_completion_summary()
        return True
    else:
        print(f"\n‚ö†Ô∏è Some challenges failed. Please check the error messages above.")
        return False


def main():
    """Main function to run Level 5 challenges."""
    show_level_5_intro()

    # Parse command line arguments
    if len(sys.argv) > 1:
        try:
            challenge_num = int(sys.argv[1])
            if challenge_num == 1:
                success = run_challenge_1()
            elif challenge_num == 2:
                success = run_challenge_2()
            elif challenge_num == 3:
                success = run_challenge_3()
            elif challenge_num == 4:
                success = run_challenge_4()
            else:
                print(f"‚ùå Invalid challenge number: {challenge_num}")
                print("Available challenges: 1, 2, 3, 4")
                return False

            if success:
                print(f"\n‚úÖ Challenge {challenge_num} completed successfully!")
            else:
                print(f"\n‚ùå Challenge {challenge_num} failed!")

            return success

        except ValueError:
            print(f"‚ùå Invalid argument: {sys.argv[1]}")
            print("Usage: python level_5_runner.py [1|2|3|4]")
            return False
    else:
        # Run all challenges
        return run_all_challenges()


if __name__ == "__main__":
    try:
        success = main()
        exit_code = 0 if success else 1
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Level 5 execution interrupted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error in Level 5 runner: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
