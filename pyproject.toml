[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-science-sandbox"
version = "0.1.0"
description = "Advanced Data Science Learning Sandbox"
authors = [{ name = "Data Science Sandbox", email = "sandbox@example.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.8"
keywords = ["data-science", "machine-learning", "sandbox", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
]

# Black formatter configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | venv
  | env
  | build
  | dist
  | node_modules
  | __pycache__
  | \.ruff_cache
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_third_party = [
    "numpy",
    "pandas",
    "sklearn",
    "matplotlib",
    "seaborn",
    "plotly",
]
known_first_party = ["sandbox", "challenges"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = false  # Allow for data science flexibility
disallow_untyped_defs = false  # More lenient for data science
disallow_untyped_calls = false
ignore_missing_imports = true
strict_optional = true
show_error_codes = true

# Per-module mypy configuration
[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "pandas.*",
    "numpy.*",
    "scipy.*",
    "lightgbm.*",
    "xgboost.*",
]
ignore_missing_imports = true

# Ruff configuration - modern Python linter and formatter
[tool.ruff]
target-version = "py38"
line-length = 88
fix = true
show-fixes = true

# Enable these rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe complexity
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PD",  # pandas-vet
    "NPY", # numpy-specific rules
]

# Ignore these specific rules (more lenient for data science)
ignore = [
    "E501",   # line too long, handled by black
    "E731",   # do not assign a lambda expression, use a def
    "C901",   # too complex (allow complex data science functions)
    "B008",   # do not perform function calls in argument defaults
    "ARG002", # unused method argument (common in data science)
    "ARG001", # unused function argument (common in data science)
    "N803",   # argument name should be lowercase (allow X, y in ML)
    "N806",   # variable name should be lowercase (allow X, y in ML)
    "RET504", # unnecessary variable assignment before return
    "SIM108", # use ternary operator (readability preference)
    "PTH123", # use pathlib (legacy code compatibility)
]

# Per-file ignores for specific use cases
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]                   # Allow unused imports and star imports
"tests/*" = ["ARG001", "ARG002", "B011", "S101"]   # Test-specific ignores
"challenges/*" = ["N803", "N806", "PD002", "C901"] # ML/DS specific ignores
"notebooks/*" = ["E402", "F401", "B018"]           # Notebook-specific ignores
"scripts/*" = ["T201"]                             # Allow print statements in scripts

# Ruff isort configuration
[tool.ruff.isort]
known-first-party = ["sandbox", "challenges"]
known-third-party = [
    "numpy",
    "pandas",
    "sklearn",
    "matplotlib",
    "seaborn",
    "plotly",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

# Ruff mccabe complexity
[tool.ruff.mccabe]
max-complexity = 15 # More lenient for data science

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "env", "node_modules", ".git"]
skips = [
    "B101",
    "B601",
    "B311",
] # Skip assert_used, shell injection, random module

# Coverage configuration
[tool.coverage.run]
source = ["sandbox", "challenges"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=sandbox",
    "--cov=challenges",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow-running tests",
    "api: API tests",
    "ml: Machine learning tests",
    "data: Data processing tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
